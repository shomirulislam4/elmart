@use '../utilities/index' as utils;
@use '../base/index' as base;

/* Button Styling */
@mixin eltButtonStyling {
    @include base.medium__text;
    @include utils.transition-03s;
    height: 48px;
    width: fit-content;
    padding: 0 24px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
    color: base.$base100;
    font-weight: 500;
    text-align: center;
    text-transform: capitalize;
    cursor: pointer;

    svg {
        height: 24px;
        width: 24px;
        stroke: base.$base100;
    }

    @each $breakpoint, $config in $buttonStyle-breakpoints {
        $min-width: map-get($config, min-width);
        $max-width: map-get($config, max-width);
        $eltbuttonstyle: map-get($config, eltButtonStyling);

        @if $eltbuttonstyle != null {
            @media screen and (min-width: $min-width) and (max-width: $max-width) {
                padding: map-get($eltbuttonstyle, padding);
                gap: map-get($eltbuttonstyle, gap);
            }
        }
    }
}

/* Breakpoints Configuration */
$buttonStyle-breakpoints: (
    xxs: (
        min-width: 200px,
        max-width: 289px,
            eltButtonStyling: (padding: 0 12px, gap: 5px, height: 38px, svg-size: (height: 14px, width: 14px)),
    ),
    xs: (
        min-width: 290px,
        max-width: 414px,
            eltButtonStyling: (padding: 0 14px, gap: 7px, height: 42px, svg-size: (height: 16px, width: 16px)),
    ),
    s: (
        min-width: 415px,
        max-width: 575px,
            eltButtonStyling: (padding: 0 16px, gap: 9px, height: 44px, svg-size: (height: 18px, width: 18px)),
    ),
    sm: (
        min-width: 576px,
        max-width: 767px,
            eltButtonStyling: (padding: 0 18px, gap: 11px, height: 46px, svg-size: (height: 20px, width: 20px)),
    ),
);

@mixin apply-buttonStyle() {
    @each $breakpoint, $config in $buttonStyle-breakpoints {
        $min-width: map-get($config, min-width);
        $max-width: map-get($config, max-width);
        $eltbuttonstyle: map-get($config, eltButtonStyling);
  
        @media screen and (min-width: $min-width) and (max-width: $max-width) {
            padding: map-get($eltbuttonstyle, padding);
            gap: map-get($eltbuttonstyle, gap);
            height: map-get($eltbuttonstyle, height);

            svg {
                height: map-get(map-get($eltbuttonstyle, svg-size), height);
                width: map-get(map-get($eltbuttonstyle, svg-size), width);
            }
        }
    }
}

/* Button Variants */
@mixin elt__button__a {
    @include eltButtonStyling();
    @include apply-buttonStyle();
    background: base.$brandPrimaryColor;

    &:hover {
        background: base.$brandTertiaryColor;
    }

    &:active {
        background: base.$brandTertiaryColor;
        box-shadow: 0 0 0 4px base.$FillSecondaryColor;
    }

    &:disabled {
        background: base.$backgroundTertiaryColor;
        color: base.$base500;
        cursor: not-allowed;
        box-shadow: none;

        svg {
            stroke: base.$base500;
        }
    }
}

@mixin elt__button__b {
    @include eltButtonStyling();
    @include apply-buttonStyle();
    background: base.$FillPrimaryColor;
    color: base.$brandPrimaryColor;

    &:hover {
        background: base.$FillSecondaryColor;
    }

    &:active {
        background: base.$FillPrimaryColor;
        box-shadow: 0 0 0 4px base.$FillSecondaryColor;
    }

    svg {
        stroke: base.$brandPrimaryColor;
    }

    &:disabled {
        background: base.$backgroundTertiaryColor;
        color: base.$base500;
        cursor: not-allowed;
        box-shadow: none;

        svg {
            stroke: base.$base500;
        }
    }
}

@mixin elt__button__c {
    @include eltButtonStyling();
    @include apply-buttonStyle();
    background: base.$backgroundPrimaryColor;
    color: base.$brandPrimaryColor;
    border: 1px solid base.$brandPrimaryColor;

    svg {
        stroke: base.$brandPrimaryColor;
    }

    &:hover {
        background: base.$FillPrimaryColor;
    }

    &:active {
        background: base.$FillPrimaryColor;
        box-shadow: 0 0 0 4px base.$FillSecondaryColor;
    }

    &:disabled {
        color: base.$base500;
        background: base.$backgroundPrimaryColor;
        border: 1px solid base.$backgroundTertiaryColor;
        cursor: not-allowed;
        box-shadow: none;
        
        svg {
            stroke: base.$base500;
        }
    }
}

@mixin elt__button__d {
    @include eltButtonStyling();
    @include apply-buttonStyle();
    background: base.$backgroundPrimaryColor;
    color: base.$brandPrimaryColor;

    &:hover {
        background: base.$FillPrimaryColor;
    }

    &:active {
        background: base.$FillPrimaryColor;
        box-shadow: 0 0 0 4px base.$FillSecondaryColor;
    }

    svg {
        stroke: base.$brandPrimaryColor;
    }

    &:disabled {
        background: base.$backgroundPrimaryColor;
        color: base.$base500;
        cursor: not-allowed;
        box-shadow: none;

        svg {
            stroke: base.$base500;
        }
    }
}


/* Main CTA Button */
.elt__cta__button {
    @include utils.border__50p;
    display: block;
    height: 40px;
    width: 40px;
    line-height: 40px;
    text-align: center;
    flex-shrink: 0;
    flex-grow: 0;
    background: base.$base200;

    svg {
        height: 24px;
        width: 24px;
        stroke: base.$base800;
    }
}

.elt__cta__button:hover {
    background: base.$brandPrimaryColor;

    svg {
        stroke: base.$base200;
    }
}